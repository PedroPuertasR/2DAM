
SET SERVEROUTPUT ON SIZE 20000
SET LINESIZE 120
SET PAGESIZE 60
START C:/TABLASUNI13.SQL
-----------------------------------------------------------------------------------

--1.-Escribir un paquete completo para gestionar los empleados. El paquete se llamará gest_emple e incluirá, al menos los siguientes subprogramas:
--  -insertar_nuevo_emple
--  -borrar_emple. Cuando se borra un empleado todos los empleados que
--   dependían de él pasarán a depender del director del empleado borrado.
--  -modificar_oficio_emple
--  -modificar_dept_emple
--  -modificar_dir_emple
--  -modificar_salario_emple
--  -modificar_comision_emple
--  -visualizar_datos_emple. También se incluirá una versión sobrecargada del
--   procedimiento que recibirá el nombre del empleado.
--  -buscar_emple_por_dnombre. Función local que recibe el nombre y devuelve
--   el número.

-- Todos los procedimientos recibirán el número del empleado seguido de los demás
-- datos necesarios. También se incluirán en el paquete cursores, así como siguientes procedimientos que afectarán a todos los empleados:

--  -subida_salario_pct: incrementará el salario de todos los empleados el porcentaje
--   indicado en la llamada que no podrá ser superior al 25%.

--  -subida_salario_imp: sumará al salario de todos los empleados el importe indicado
--   en la llamada. Antes de proceder a la incrementar los
--   salarios se comprobará que el importe indicado no supera
--   el 25% del salario medio.


CREATE OR REPLACE PACKAGE GEST_EMPLE AS
  -- CURSOR QUE DEVUELVE TODOS LOS DATOS DE LOS EMPLE
  CURSOR C_EMPLE IS
    SELECT *
    FROM EMPLE;

  -- INSERTAR UN NUEVO EMPLEADO
  PROCEDURE INSERTAR_NUEVO_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_APELLIDO EMPLE.APELLIDO%TYPE, P_OFICIO EMPLE.OFICIO%TYPE, P_DIR EMPLE.DIR%TYPE, P_FECHA_ALT EMPLE.FECHA_ALT%TYPE, P_SALARIO EMPLE.SALARIO%TYPE, P_COMISION EMPLE.COMISION%TYPE, P_DEPT_NO EMPLE.DEPT_NO%TYPE);

  -- BORRAR UN EMPLEADO
  PROCEDURE BORRAR_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE);

  -- MODIFICAR EL OFICIO DE UN EMPLEADO
  PROCEDURE MODIFICAR_OFICIO_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_OFICIO EMPLE.OFICIO%TYPE);

  -- MODIFICAR EL DEPARTAMENTO DE UN EMPLEADO
  PROCEDURE MODIFICAR_DEPT_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_DEPT_NO EMPLE.DEPT_NO%TYPE);

  -- MODIFICAR EL DIRECTOR DE UN EMPLEADO
  PROCEDURE MODIFICAR_DIR_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_DIR EMPLE.DIR%TYPE);

  -- MODIFICAR EL SALARIOARIO DE UN EMPLEADO
  PROCEDURE MODIFICAR_SALARIO_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_SALARIO EMPLE.SALARIO%TYPE);

  -- MODIFICAR LA COMISI�N DE UN EMPLEADO
  PROCEDURE MODIFICAR_COMISION_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_COMISION EMPLE.COMISION%TYPE);

  -- VISUALIZAR LOS DATOS DE UN EMPLEADO
  PROCEDURE VISUALIZAR_DATOS_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE);
  -- SOBRECARGA DEL VISUALIZAR LOS DATOS DE UN EMPLEADO
  PROCEDURE VISUALIZAR_DATOS_EMPLE (P_APELLIDO EMPLE.APELLIDO%TYPE);

  -- FUNCI�N LOCAL PARA BUSCAR UN EMPLEADO POR NOMBRE
  FUNCTION BUSCAR_EMPLE_POR_DNOMBRE (P_EMPLE.APELLIDO%TYPE) RETURN EMPLE.EMP_NO%TYPE;

  -- SUBIR EL SALARIOARIO DE TODOS LOS EMPLE EN UN PORCENTAJE
  PROCEDURE SUBIDA_SALARIO_PCT(P_PCT NUMBER);
  PROCEDURE SUBIDA_SALARIO_IMP(P_IMP NUMBER);

END GEST_EMPLE;


CREATE OR REPLACE PACKAGE BODY GEST_EMPLE AS
  /* SUBPROGRAMAS PARA GESTIONAR EMPLE */
  PROCEDURE INSERTAR_NUEVO_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_APELLIDO EMPLE.APELLIDO%TYPE, P_OFICIO EMPLE.OFICIO%TYPE, P_DIR EMPLE.DIR%TYPE, P_FECHA_ALT EMPLE.FECHA_ALT%TYPE, P_SALARIO EMPLE.SALARIO%TYPE, P_COMISION EMPLE.COMISION%TYPE, P_DEPT_NO EMPLE.DEPT_NO%TYPE) IS
  BEGIN
    -- CODIGO PARA INSERTAR UN NUEVO EMPLEADO
	
	INSERT INTO EMPLE (EMP_NO, APELLIDO, OFICIO, DIR, FECHA_ALT, SALARIO, COMISION, DEPT_NO)
  VALUES (P_EMP_NO, P_APELLIDO, P_OFICIO, P_DIR, P_FECHA_ALT, P_SALARIO, P_COMISION, P_DEPT_NO);

  END INSERTAR_NUEVO_EMPLE;

  PROCEDURE BORRAR_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE) IS
  BEGIN
    -- CODIGO PARA BORRAR UN EMPLEADO Y ASIGNAR SUS DEPENDIENTES AL DIRECTOR
	UPDATE EMPLE SET DIR = (SELECT DIR FROM EMPLE WHERE EMP_NO = P_EMP_NO)
  WHERE DIR = P_EMP_NO;

  DELETE FROM EMPLE WHERE EMP_NO = P_EMP_NO;
  END BORRAR_EMPLE;

  PROCEDURE MODIFICAR_OFICIO_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_OFICIO EMPLE.OFICIO%TYPE) IS
  BEGIN
    -- CODIGO PARA MODIFICAR EL OFICIO DE UN EMPLEADO
	UPDATE EMPLE SET OFICIO = P_OFICIO WHERE EMP_NO = P_EMP_NO;
  END MODIFICAR_OFICIO_EMPLE;

  PROCEDURE MODIFICAR_DEPT_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_DEPT_NO EMPLE.DEPT_NO%TYPE) IS
  BEGIN
    -- CODIGO PARA MODIFICAR EL DEPARTAMENTO DE UN EMPLEADO
	UPDATE EMPLE SET DEPT_NO = P_DEPT_NO WHERE EMP_NO = P_EMP_NO;
  END MODIFICAR_DEPT_EMPLE;

  PROCEDURE MODIFICAR_DIR_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_DIR EMPLE.DIR%TYPE) IS
	BEGIN
	-- CODIGO PARA MODIFICAR EL DIRECTOR DE UN EMPLEADO
	UPDATE EMPLE SET DIR = P_DIR WHERE EMP_NO = P_EMP_NO;
	END MODIFICAR_DIR_EMPLE;

	PROCEDURE MODIFICAR_SALARIO_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_SALARIO EMPLE.SALARIO%TYPE) IS
	BEGIN
	-- CODIGO PARA MODIFICAR EL SALARIO DE UN EMPLEADO
	
	UPDATE EMPLE SET SALARIO = P_SALARIO WHERE EMP_NO = P_EMP_NO;
	END MODIFICAR_SALARIO_EMPLE;

	PROCEDURE MODIFICAR_COMISION_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE, P_COMISION EMPLE.COMISION%TYPE) IS
	BEGIN
	-- CODIGO PARA MODIFICAR LA COMISI�N DE UN EMPLEADO
	UPDATE EMPLE SET COMISION = P_COMISION WHERE EMP_NO = P_EMP_NO;
	END MODIFICAR_COMISION_EMPLE;

	PROCEDURE VISUALIZAR_DATOS_EMPLE (P_EMP_NO EMPLE.EMP_NO%TYPE) IS
			V_APELLIDO VARCHAR2(20);
		V_OFICIO VARCHAR2(20);
		V_DIR NUMBER;
		V_FECHA_ALT DATE;
		V_SALARIO NUMBER;
		V_COMISION NUMBER;
		V_DEPT_NO NUMBER;
	BEGIN
		SELECT APELLIDO, OFICIO, DIR, FECHA_ALT, SALARIO, COMISION, DEPT_NO
		INTO V_APELLIDO, V_OFICIO, V_DIR, V_FECHA_ALT, V_SALARIO, V_COMISION, V_DEPT_NO
		FROM EMPLE
		WHERE EMP_NO = P_EMP_NO;
		DBMS_OUTPUT.PUT_LINE('NOMBRE: ' || V_APELLIDO);
		DBMS_OUTPUT.PUT_LINE('OFICIO: ' || V_OFICIO);
		DBMS_OUTPUT.PUT_LINE('DIRECTOR: ' || V_DIR);
		DBMS_OUTPUT.PUT_LINE('FECHA ALTA: ' || V_FECHA_ALT);
		DBMS_OUTPUT.PUT_LINE('SALARIO: ' || V_SALARIO);
		DBMS_OUTPUT.PUT_LINE('COMISI�N: ' || V_COMISION);
		DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: ' || V_DEPT_NO);
	
	END VISUALIZAR_DATOS_EMPLE;

    PROCEDURE VISUALIZAR_DATOS_EMPLE (P_NOMBRE VARCHAR2) IS
		NUM_EMP NUMBER(5);
		V_APELLIDO VARCHAR2(20);
		V_OFICIO VARCHAR2(20);
		V_DIR NUMBER;
		V_FECHA_ALT DATE;
		V_SALARIO NUMBER;
		V_COMISION NUMBER;
		V_DEPT_NO NUMBER;
	BEGIN
		NUM_EMP := BUSCAR_EMPLE_POR_DNOMBRE(P_NOMBRE);
		
		SELECT APELLIDO, OFICIO, DIR, FECHA_ALT, SALARIO, COMISION, DEPT_NO
		INTO V_APELLIDO, V_OFICIO, V_DIR, V_FECHA_ALT, V_SALARIO, V_COMISION, V_DEPT_NO
		FROM EMPLE
		WHERE EMP_NO = NUM_EMP;
		
			DBMS_OUTPUT.PUT_LINE('NOMBRE: ' || V_APELLIDO);
		DBMS_OUTPUT.PUT_LINE('OFICIO: ' || V_OFICIO);
		DBMS_OUTPUT.PUT_LINE('DIRECTOR: ' || V_DIR);
		DBMS_OUTPUT.PUT_LINE('FECHA ALTA: ' || V_FECHA_ALT);
		DBMS_OUTPUT.PUT_LINE('SALARIO: ' || V_SALARIO);
		DBMS_OUTPUT.PUT_LINE('COMISI�N: ' || V_COMISION);
		DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: ' || V_DEPT_NO);
		
	END VISUALIZAR_DATOS_EMPLE;
	FUNCTION BUSCAR_EMPLE_POR_DNOMBRE (P_DNOMBRE DEPART.DNOMBRE%TYPE) RETURN NUMBER IS
	V_EMP_NO NUMBER;
	BEGIN
		-- SUPONGAMOS QUE EXISTE UNA TABLA LLAMADA "EMPLE" CON LOS SIGUIENTES CAMPOS:
		-- EMP_NO, NOMBRE, APELLIDO, OFICIO, DIR, FECHA_ALT, SALARIO, COMISION, DEPT_NO
		SELECT EMP_NO INTO V_EMP_NO
		FROM EMPLE
		WHERE DEPT_NO = (SELECT DEPT_NO FROM DEPART WHERE DNOMBRE = P_DNOMBRE);

		RETURN V_EMP_NO;
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				DBMS_OUTPUT.PUT_LINE("ERROR. NO EXISTE EL EMPLEADO");

		
	END BUSCAR_EMPLE_POR_DNOMBRE;

	FUNCTION BUSCAR_EMPLE_POR_DNOMBRE (P_NOMBRE VARCHAR2) RETURN NUMBER IS
	V_EMP_NO NUMBER;
	BEGIN
		-- SUPONGAMOS QUE EXISTE UNA TABLA LLAMADA "EMPLE" CON LOS SIGUIENTES CAMPOS:
		-- EMP_NO, NOMBRE, APELLIDO, OFICIO, DIR, FECHA_ALT, SALARIO, COMISION, DEPT_NO
		SELECT EMP_NO INTO V_EMP_NO
		FROM EMPLE
		WHERE NOMBRE = P_NOMBRE;

		-- VERIFICAMOS SI EL EMPLEADO HA SIDO ENCONTRADO
		IF V_EMP_NO IS NULL THEN
		RAISE_APPLICATION_ERROR (-20002, 'EMPLEADO NO ENCONTRADO');
		END IF;

	RETURN V_EMP_NO;
	END BUSCAR_EMPLE_POR_DNOMBRE;

	PROCEDURE SUBIDA_SALARIO_PCT (P_PORCENTAJE NUMBER) IS
	BEGIN
		-- SUPONGAMOS QUE EXISTE UNA TABLA LLAMADA "EMPLE" CON LOS SIGUIENTES CAMPOS:
		-- EMP_NO, NOMBRE, APELLIDO, OFICIO, DIR, FECHA_ALT, SALARIO, COMISION, DEPT_NO
		UPDATE EMPLE
		SET SALARIO = SALARIO + (SALARIO * P_PORCENTAJE / 100);
	END SUBIDA_SALARIO_PCT;

	PROCEDURE SUBIDA_SALARIO_IMP (P_IMPORTE NUMBER) IS
	BEGIN
	-- CODIGO PARA SUMAR UN IMPORTE DETERMINADO AL SALARIO DE TODOS LOS EMPLE
	UPDATE EMPLE
	SET SALARIO = SALARIO + P_IMPORTE;
	END SUBIDA_SALARIO_IMP;
END GEST_EMPLE;




--------------------------------------------------------------------------------------------------
--2--Escribir un paquete pq_provincia que creará una tabla PL/SQL con 50 elementos
--de tipo registro que contendrán los campos correspondientes. Y que incluirá,
--además, las siguientes funciones:
-- -provincia: Función. Recibe la matrícula y devuelve la provincia.
-- -matricula: Función. Recibe la provincia y devuelve la matrícula.
-- -cp: Función. Recibe la provincia y devuelve los dos primeros dígitos del código
--  postal.
-- -borrar_prov: elimina la tabla PL/SQL.


--CABECERA
CREATE OR REPLACE PACKAGE PQ_PROVINCIAS AS
  TYPE T_PROV IS TABLE OF PROVINCIAS%ROWTYPE
  INDEX BY BINARY_INTEGER;
  CURSOR C1 RETURN PROVINCIAS%ROWTYPE;

	-- FUNCIÓN QUE RECIBE LA MATRÍCULA Y DEVUELVE LA PROVINCIA
  FUNCTION PROVINCIA (P_MAT VARCHAR2)
    RETURN VARCHAR2;

  -- FUNCIÓN QUE RECIBE LA PROVINCIA Y DEVUELVE LA MATRÍCULA
  FUNCTION MATRICULA (P_PROV VARCHAR2)
    RETURN VARCHAR2;

  -- FUNCIÓN QUE RECIBE LA PROVINCIA Y DEVUELVE LOS DOS PRIMEROS DÍGITOS DEL CÓDIGO POSTAL
  FUNCTION CP (P_PROV VARCHAR2)
    RETURN VARCHAR2;

  -- FUNCIÓN QUE ELIMINA LA TABLA "PROVINCIAS"
  PROCEDURE BORRAR_PROV ;
END PQ_PROVINCIAS;




--CUERPO

CREATE OR REPLACE PACKAGE BODY PQ_PROVINCIAS AS
  CURSOR C1 RETURN PROVINCIAS%ROWTYPE IS SELECT * FROM PROVINCIAS;
  V_PROV T_PROV;
  I NUMBER;

  FUNCTION PROVINCIA (P_MAT VARCHAR2)
    RETURN VARCHAR2
  IS
    V_PROVINCIA VARCHAR2(11);
  BEGIN
    FOR V IN V_PROV.FIRST .. V_PROV.LAST LOOP
      IF V_PROV(I).MAT = P_MAT THEN
        V_PROVINCIA := V_PROV(I).PROV;
        RETURN V_PROVINCIA;
      END IF;
      I := I + 1;
    END LOOP;
    I := 1;
  END PROVINCIA;

  FUNCTION MATRICULA (P_PROV VARCHAR2)
    RETURN VARCHAR2
  IS
    V_MATRICULA VARCHAR2(2);
  BEGIN
    FOR V IN V_PROV.FIRST .. V_PROV.LAST LOOP
      IF V_PROV(I).PROV = P_PROV THEN
        V_MATRICULA := V_PROV(I).MAT;
        RETURN V_MATRICULA;
      END IF;
      I := I + 1;
    END LOOP;
    I := 1;
  END MATRICULA;

  FUNCTION CP (P_PROV VARCHAR2)
    RETURN VARCHAR2
  IS
    V_CP VARCHAR2(2);
  BEGIN
    FOR V IN V_PROV.FIRST .. V_PROV.LAST LOOP
      IF V_PROV(I).PROV = P_PROV THEN
        V_CP := V_PROV(I).CP;
        RETURN V_CP;
      END IF;
      I := I + 1;
    END LOOP;
    I := 1;
  END CP;

  PROCEDURE BORRAR_PROV
  IS
  BEGIN
    V_PROV.DELETE;
    DBMS_OUTPUT.PUT_LINE('OK');
  END BORRAR_PROV;

BEGIN
  I := 1;
  FOR V1 IN C1 LOOP
    V_PROV(I).MAT := V1.MAT;
    V_PROV(I).PROV := V1.PROV;
    V_PROV(I).CP := V1.CP;
    I := I + 1;
  END LOOP;
  I := 1;
END PQ_PROVINCIAS;


--EJEMPLO DE EJECUCION

DECLARE
  VAR VARCHAR(2);
BEGIN
  VAR := PQ_PROVINCIAS.CP('TOLEDO');
  DBMS_OUTPUT.PUT_LINE('EL INICIO DE CP ES EL: '||VAR);
END;



